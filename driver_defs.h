#pragma once

#include <ntifs.h>
#include <wdm.h>
#include <intrin.h> //for rdtsc etc.

// status codes
#define STATUS_SUCCESS                        0x00000000
#define STATUS_FAILURE                        0xC0000001
#define STATUS_NOT_FOUND                      0xC0000225
#define STATUS_MEMORY_ALLOCATION_FAILED       0xC0000017
#define STATUS_INVALID_PARAMETER              0xC000000D
#define STATUS_DRIVER_UNLOADED                0xC00000E7
#define STATUS_HOOK_FAILED                    0xC0000002
#define STATUS_UNHOOK_FAILED                  0xC0000003
#define STATUS_INVALID_HANDLE                0xC0000008


// device and symbolic link names
#define DEVICE_NAME L"\\Device\\CheatDriver"
#define SYMLINK_NAME L"\\DosDevices\\CheatDriver"

// pool tags
#define POOL_TAG_MEM_C    'CmeM'
#define POOL_TAG_MEM_H    'HmeM'
#define POOL_TAG_READ_M   'RdMe'
#define POOL_TAG_PROC_ID  'IdPc'
#define POOL_TAG_COMM_B   'CmCb'
#define POOL_TAG_STR_ENC  'StEn'
#define POOL_TAG_HOOK_M 'HkMe'

// io control codes
#define IO_CONTROL_CODE_BASE 0x900
#define IO_CONTROL_GET_PROCESS_ID       CTL_CODE(FILE_DEVICE_UNKNOWN, IO_CONTROL_CODE_BASE + 1, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IO_CONTROL_READ_MEMORY          CTL_CODE(FILE_DEVICE_UNKNOWN, IO_CONTROL_CODE_BASE + 2, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IO_CONTROL_WRITE_MEMORY         CTL_CODE(FILE_DEVICE_UNKNOWN, IO_CONTROL_CODE_BASE + 3, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IO_CONTROL_ENCRYPT_STRING       CTL_CODE(FILE_DEVICE_UNKNOWN, IO_CONTROL_CODE_BASE + 4, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IO_CONTROL_DECRYPT_STRING       CTL_CODE(FILE_DEVICE_UNKNOWN, IO_CONTROL_CODE_BASE + 5, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IO_CONTROL_INJECT_MEMORY        CTL_CODE(FILE_DEVICE_UNKNOWN, IO_CONTROL_CODE_BASE + 6, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IO_CONTROL_SCAN_PATTERN         CTL_CODE(FILE_DEVICE_UNKNOWN, IO_CONTROL_CODE_BASE + 7, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IO_CONTROL_INSTALL_HOOK         CTL_CODE(FILE_DEVICE_UNKNOWN, IO_CONTROL_CODE_BASE + 8, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IO_CONTROL_UNINSTALL_HOOK       CTL_CODE(FILE_DEVICE_UNKNOWN, IO_CONTROL_CODE_BASE + 9, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IO_CONTROL_REMOVE_DRIVER        CTL_CODE(FILE_DEVICE_UNKNOWN, IO_CONTROL_CODE_BASE + 10, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IO_CONTROL_PROTECT_MEMORY       CTL_CODE(FILE_DEVICE_UNKNOWN, IO_CONTROL_CODE_BASE + 11, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IO_CONTROL_UNPROTECT_MEMORY     CTL_CODE(FILE_DEVICE_UNKNOWN, IO_CONTROL_CODE_BASE + 12, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IO_CONTROL_GET_MODULE_ADDRESS  CTL_CODE(FILE_DEVICE_UNKNOWN, IO_CONTROL_CODE_BASE + 13, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IO_CONTROL_INJECT_DLL           CTL_CODE(FILE_DEVICE_UNKNOWN, IO_CONTROL_CODE_BASE + 14, METHOD_BUFFERED, FILE_ANY_ACCESS)


// communication buffer structure
typedef struct _COMMUNICATION_BUFFER {
    HANDLE ProcessId;
    PVOID Address;
    PVOID Buffer;
    SIZE_T Size;
    ULONG PatternId;
    NTSTATUS Status;
    ULONG_PTR ModuleBase;
    PCHAR ModuleName;
    PCHAR Pattern;
    PCHAR Mask;
    ULONG HookId;
    ULONG_PTR HookAddress;
    ULONG_PTR OriginalFunction;
} COMMUNICATION_BUFFER, * PCOMMUNICATION_BUFFER;

// hook entry structure
typedef struct _HOOK_ENTRY {
    ULONG HookId;
    ULONG_PTR HookAddress;
    ULONG_PTR OriginalFunction;
} HOOK_ENTRY, * PHOOK_ENTRY;